use std::convert::{TryFrom, TryInto};
use std::fmt;
use std::io::{self, BufRead, BufReader, Read, Write};
use std::net::TcpStream;
use std::str::FromStr;
use std::thread::sleep_ms;

use bufstream::BufStream;
//#[derive(Clone, Debug)]
pub struct TreeEvaluator {
    stream: BufStream<TcpStream>,
}

impl TreeEvaluator {
    pub fn new() -> Self {
        let mut stream =
            TcpStream::connect("127.0.0.1:9000").expect("Couldn't connect to the server...");
        let mut stream = BufStream::new(stream);
        // Read the first line
        let mut dps = String::new();
        stream.read_line(&mut dps);
        println!("Read first line: {}", dps);
        // Break to let the user set up POB
        println!("Set up POB and press enter when you have finished");
        let stdin = io::stdin();
        let mut stdin_lines = stdin.lock().lines();
        let mut tmp = stdin_lines.next().unwrap().unwrap();
        // Read the lines generated by setup
        stream.read_line(&mut dps);
        println!("Read setup lines: {}", dps);
        TreeEvaluator { stream }
    }
    pub fn dps(&mut self, tree: &str) -> f64 {
        let mut buf = String::from(tree);
        buf.push_str("\n");
        let tree = &buf.as_bytes();
        self.stream.write_all(tree);
        self.stream.flush();
        let mut dps = String::new();
        if self.stream.read_line(&mut dps).is_err() {
            return 0.0;
        }
        dps.trim().parse().unwrap_or(0.0)
    }
}
